"""Alterar comprimento do campo numAcesso para 20 caracteres

Revision ID: b2fded1f7c43
Revises: 
Create Date: 2024-08-17 13:40:19.162398

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b2fded1f7c43'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('_prisma_migrations')
    with op.batch_alter_table('Pacientes', schema=None) as batch_op:
        batch_op.drop_index('Pacientes_numero_key')
        batch_op.drop_index('Pacientes_patientID_key')

    op.drop_table('Pacientes')
    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.drop_index('User_email_key')

    op.drop_table('User')
    with op.batch_alter_table('paciente', schema=None) as batch_op:
        batch_op.alter_column('numAcesso',
               existing_type=sa.VARCHAR(length=8),
               type_=sa.String(length=20),
               existing_nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('paciente', schema=None) as batch_op:
        batch_op.alter_column('numAcesso',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=8),
               existing_nullable=True)

    op.create_table('User',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('password', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='User_pkey')
    )
    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.create_index('User_email_key', ['email'], unique=True)

    op.create_table('Pacientes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('numAcesso', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('visita', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('patientID', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('modalidade', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tipoExame', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('numero', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('estado', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('medSol', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('laudo', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sexo', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('especial', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('urgente', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('restaurado', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Pacientes_pkey')
    )
    with op.batch_alter_table('Pacientes', schema=None) as batch_op:
        batch_op.create_index('Pacientes_patientID_key', ['patientID'], unique=True)
        batch_op.create_index('Pacientes_numero_key', ['numero'], unique=True)

    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='_prisma_migrations_pkey')
    )
    # ### end Alembic commands ###
